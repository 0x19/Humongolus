{"name":"Humongolus","body":"### Persistence and Widget Framework for Python and MongoDB\r\n\r\nGoogle Group: http://groups.google.com/group/humongolus\r\n\r\n#### Features\r\n* Type Validation\r\n* Lazy Relationships\r\n* Full MongoDB Index Support\r\n* Dirty Updating (only send changes to db)\r\n* Full Test Suite (97% code coverage)\r\n* Documentation\r\n* Exposes default MongoDB cursors \r\n* Robust Widget System\r\n* Default HTML Widgets\r\n    * Text\r\n    * Password\r\n    * Checkbox\r\n    * Select\r\n    * MultiSelect\r\n    * TextArea\r\n    * FieldSet\r\n    * Form\r\n* List validation (len and multiple types)\r\n* Attribute aliases\r\n* Dynamic Field Validation\r\n* Large Collection of Default Field Types\r\n    * Char\r\n    * Integer\r\n    * Float\r\n    * Date\r\n    * TimeStamp\r\n    * DocumentID (pseudo DBRef)\r\n    * AutoIncrement\r\n    * DynamicDocument (pseudo DBRef)\r\n    * Boolean\r\n    * Regex\r\n    * Geo\r\n    * Email\r\n    * Phone\r\n    * Choice Fields (Model, Collection and List)\r\n    * File\r\n* Endless EmbeddedDocuments\r\n* Default Created/Modified attributes\r\n* Easily integrates with Backbone.js or other client side frameworks\r\n* TODO\r\n    * Tutorials\r\n    * Plugins\r\n\r\n#### Usage also see test.py and tests/test_field.py for more usage examples.\r\n\r\n    from pymongo.connection import Connection\r\n    import logging\r\n    import humongolus as orm\r\n    import datetime\r\n    import humongolus.field as field\r\n\r\n    conn = Connection()\r\n    FORMAT = '%(asctime)-15s %(message)s'\r\n    logging.basicConfig(format=FORMAT)\r\n    logger = logging.getLogger(\"humongolus\")\r\n\r\n    orm.settings(logger=logger, db_connection=conn)\r\n\r\n    class Location(orm.EmbeddedDocument):\r\n        city = field.Char(required=True)\r\n        state = field.Char()\r\n\r\n    class Job(orm.EmbeddedDocument):\r\n        employer = field.Char()\r\n        title = field.Char(required=True)\r\n        locations = orm.List(type=Location)\r\n\r\n    class Human(orm.Document):\r\n        _db = \"test\"\r\n        _collection = \"humans\"\r\n        human_id = field.AutoIncrement(collection=\"human\")\r\n        name = field.Char(required=True, min=2, max=25)\r\n        age = field.Integer(min=0, max=3000)\r\n        height = field.Float(min=1, max=100000)\r\n        weight = field.Float(min=1, max=30000)\r\n        jobs = orm.List(type=Job)\r\n        genitalia = field.Char()\r\n\r\n    class Female(Human):\r\n        genitalia = field.Char(default='inny')\r\n\r\n    class Male(Human):\r\n        genitalia = field.Char(default='outy')\r\n\r\n    class Car(orm.Document):\r\n        _db = \"test\"\r\n        _collection = \"cars\"\r\n        owner = field.DynamicDocument()\r\n        make = field.Char()\r\n        model = field.Char()\r\n        year = field.Date()\r\n        silly_date = field.TimeStamp()    \r\n\r\n    Human.cars = orm.Lazy(type=Car, key='owner._id')\r\n\r\n    chris = Male()\r\n    chris.name = \"Chris\"\r\n    chris.age = 31\r\n    chris.height = 100\r\n    chris.weight = 180\r\n\r\n    job = Job()\r\n    job.employer = \"Entropealabs\"\r\n    job.title = \"President\"\r\n\r\n    loc = Location()\r\n    loc.city = \"Chicago\"\r\n    loc.state = \"IL\"\r\n\r\n    job.locations.append(loc)\r\n    chris.jobs.append(job)\r\n\r\n    print chris._json()\r\n        {'jobs': [\r\n            {\r\n                'employer': u'Entropealabs', \r\n                'locations': [\r\n                    {'city': u'Chicago', 'state': u'IL'}\r\n                ], \r\n                'title': u'President'}\r\n            ], \r\n            'name': u'Chris', \r\n            'weight': 180.0, \r\n            'age': 31, \r\n            'height': 100.0, \r\n            'genitalia': u'outy', \r\n            'human_id': 1328\r\n        }\r\n\r\n    _id = chris.save()\r\n\r\n    print _id\r\n\r\n        4f36dd48eac0742b92000000\r\n   \r\n    for person in Human.find().sort({\"name\":-1}):\r\n        print person.name\r\n        print person.created\r\n        print person.modifed\r\n        for job in person.jobs:\r\n            print job.title\r\n            for loc in job.locations:\r\n                print loc.city\r\n\r\n    car = Car()\r\n    car.owner = chris\r\n    car.make = \"Isuzu\"\r\n    car.model = \"Rodeo\"\r\n    car.year = datetime.datetime(1998, 1, 1)\r\n\r\n    print car\r\n        <__main__.Car object at 0x7fe3c9375650>\r\n\r\n    c_id = car.save()\r\n\r\n    print car._get(\"owner\")().name\r\n        Chris\r\n","tagline":"Persistence and Widget Framework for Python and MongoDB","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}